[
["r-principles.html", "5 R Principles 5.1 Some history 5.2 Additional R resources 5.3 Literate Programming 5.4 A data analysis to get us going 5.5 Getting data 5.6 Variables and Value 5.7 Indexing 5.8 Exploration 5.9 Functions 5.10 A note on data types 5.11 Thinking in vectors 5.12 Lists vs. vectors 5.13 Making the process explicit with pipes", " 5 R Principles Now that we have our tools ready, let’s start doing some analysis. First, let’s go over some principles of R as a data analysis environment. R is a computational environment for data analysis. It is designed around a functional language, as opposed to procedural languages like Java or C, that has desirable properties for the type of operations and workflows that are frequently performed in the course of analyzing datasets. In this exercise we will start learning some of those desirable properties while performing an analysis of a real dataset. 5.1 Some history R is an offspring of S, a language created in AT&amp;T Labs by John Chambers (now at Stanford) and others in 1976 with the goal of creating an environment for statistical computing and data analysis. The standard for the language in current use was settled in 1998. That same year, “S” won the ACM Software System award, awarded to software systems “that have a lasting influence, reflected in contributions to concepts, in commercial acceptance, or both”. In 1991, Robert Gentleman and Ross Ihaka created R to provide an open source implementation of the S language and environment. They also redesigned the language to enforce lexical scoping rules. It has been maintained by the R core group since 1997, and in 2015 an R consortium, including Microsoft, Google, and others, was created. Along with Python it is one of the most popular environments for data analysis (e.g., figure below from KDNuggets 2016 software survey) We use it for this class because we find that besides it being a state-of-the-art data analysis environment, it provides a clean end-to-end platform for teaching material across the data management-modeling-communication spectrum that we study in class. 5.2 Additional R resources Resources for learning and reading about R are listed in our here. Of note are the swirl project and DataCamp’s [introduction to R] course. One of the biggest strengths of the R ecosystem is the variety and quality of packages for data analysis available. R uses a package system (like Python and Ruby for instance). Packages are divided into two classes: base which are packages installed when R is installed, includes packages for basic statistics, computing with probability distributions, plotting and graphics, matrix manipulations and other), all other packages are available in CRAN. We will be using a fair number of these packages through the course of the semester. 5.3 Literate Programming One last note before we get started. R has great support for literate programming, where source code that contains both code, the result of evaluating that code, and text explaining that code co-exist in a single document. This is extremely valuable in data analysis, as many choices made by data analysts are worth explaning in text, and interpretation of the results of analyses can co-exist with the computations used in that analysis. This document you are reading contains both text and code. In class, we will use Rmarkdown for this purpose. 5.4 A data analysis to get us going I’m going to do a very simple analysis of Baltimore crime to show off R. We’ll use data downloaded from Baltimore City’s awesome open data site (this was downloaded a couple of years ago so if you download now, you will get different results). The repository for this particular data is here. https://data.baltimorecity.gov/Crime/BPD-Arrests/3i3v-ibrt 5.5 Getting data We’ve prepared the data previously into a comma-separated value file (.csv file). In this format, each line contains attribute values (separated by commas) for one entity in our dataset. Which we can download and load into our R environment. The read_csv command is part of the readr R package and allows you to read a dataset stored in a csv file. This function is extremely versatile, and you can read more about it by using the standard help system in R: ?read_csv. Now, the result of running calling this function is the data itself, so, by running the function in the console, the result of the function is printed. 5.6 Variables and Value To make use of this dataset we want to assign the result of calling read.csv (i.e., the dataset) to a variable: library(tidyverse) arrest_tab &lt;- read_csv(&quot;data/BPD_Arrests.csv&quot;) ## Parsed with column specification: ## cols( ## arrest = col_integer(), ## age = col_integer(), ## sex = col_character(), ## race = col_character(), ## arrestDate = col_character(), ## arrestTime = col_time(format = &quot;&quot;), ## arrestLocation = col_character(), ## incidentOffense = col_character(), ## incidentLocation = col_character(), ## charge = col_character(), ## chargeDescription = col_character(), ## district = col_character(), ## post = col_integer(), ## neighborhood = col_character(), ## `Location 1` = col_character() ## ) Now we can ask what type of value is stored in the arrest_tab variable: class(arrest_tab) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; The data.frame is a workhorse data structure in R. It encapsulates the idea of entities (in rows) and attribute values (in columns). We can ask other features of this dataset: # This is a comment in R, by the way # How many rows (entities) does this dataset contain? nrow(arrest_tab) ## [1] 104528 # How many columns (attributes)? ncol(arrest_tab) ## [1] 15 # What are the names of those columns? colnames(arrest_tab) ## [1] &quot;arrest&quot; &quot;age&quot; &quot;sex&quot; ## [4] &quot;race&quot; &quot;arrestDate&quot; &quot;arrestTime&quot; ## [7] &quot;arrestLocation&quot; &quot;incidentOffense&quot; &quot;incidentLocation&quot; ## [10] &quot;charge&quot; &quot;chargeDescription&quot; &quot;district&quot; ## [13] &quot;post&quot; &quot;neighborhood&quot; &quot;Location 1&quot; Now, in Rstudio you can view the data frame using View(arrest_tab). 5.7 Indexing A basic operation in data analysis is selecting subsets of a dataset. For that we can use a few alternative options for indexing into datasets. # to obtain the value in the first row, fifth column: arrest_tab[1,5] ## # A tibble: 1 x 1 ## arrestDate ## &lt;chr&gt; ## 1 01/01/2011 # note that indexing in R is 1-based, not 0-based, so the first row is indexed by 1 # now we want to do a bit more, so let&#39;s say we want the value in the fifth column of our dataset for the first 10 rows. For that we can use slice notation: arrest_tab[1:10,5] ## # A tibble: 10 x 1 ## arrestDate ## &lt;chr&gt; ## 1 01/01/2011 ## 2 01/01/2011 ## 3 01/01/2011 ## 4 01/01/2011 ## 5 01/01/2011 ## 6 01/01/2011 ## 7 01/01/2011 ## 8 01/01/2011 ## 9 01/01/2011 ## 10 01/01/2011 # similarly, to obtain the value in the first five columns of the first row arrest_tab[1,1:5] ## # A tibble: 1 x 5 ## arrest age sex race arrestDate ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 # what is the class of the value when we subset a single column? class(arrest_tab[1:10,5]) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; # what is the class of the value when we subset a single row? class(arrest_tab[1,1:5]) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; # what do we get with this indexing? arrest_tab[1:10,1:5] ## # A tibble: 10 x 5 ## arrest age sex race arrestDate ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 ## 2 11127013 37 B M 01/01/2011 ## 3 11126887 46 B M 01/01/2011 ## 4 11126873 50 B M 01/01/2011 ## 5 11126968 33 B M 01/01/2011 ## 6 11127041 41 B M 01/01/2011 ## 7 11126932 29 B M 01/01/2011 ## 8 11126940 20 W M 01/01/2011 ## 9 11127051 24 B M 01/01/2011 ## 10 11127018 53 B M 01/01/2011 We can index any set of rows or columns by constructing vectors of integers. In fact, the slice notation : is essentially doing that for a sequence of consecutive indices. You should think of vectors as lists of values with the same class. If we want non-consecutive indices we have other options (e.g., the c function, for “concatenate”) # non-consecutive indices using c arrest_tab[c(2,4,7,10), 1:5] ## # A tibble: 4 x 5 ## arrest age sex race arrestDate ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; ## 1 11127013 37 B M 01/01/2011 ## 2 11126873 50 B M 01/01/2011 ## 3 11126932 29 B M 01/01/2011 ## 4 11127018 53 B M 01/01/2011 # here&#39;s a fun one, when we call columns for a subset of rows arrest_tab[c(2,4,7,10), ] ## # A tibble: 4 x 15 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11127013 37 B M 01/01/2011 00:01:00 2000 Wilkens Ave ## 2 11126873 50 B M 01/01/2011 00:04:00 2100 Ashburton St ## 3 11126932 29 B M 01/01/2011 00:05:00 800 N Monroe St ## 4 11127018 53 B M 01/01/2011 00:15:00 3300 Woodland Ave ## # ... with 8 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; # there is also the `seq` function, to create sequences arrest_tab[seq(from=1,to=10), seq(1,10)] ## # A tibble: 10 x 10 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 00:00:00 &lt;NA&gt; ## 2 11127013 37 B M 01/01/2011 00:01:00 2000 Wilkens Ave ## 3 11126887 46 B M 01/01/2011 00:01:00 2800 Mayfield Ave ## 4 11126873 50 B M 01/01/2011 00:04:00 2100 Ashburton St ## 5 11126968 33 B M 01/01/2011 00:05:00 4000 Wilsby Ave ## 6 11127041 41 B M 01/01/2011 00:05:00 2900 Spellman Rd ## 7 11126932 29 B M 01/01/2011 00:05:00 800 N Monroe St ## 8 11126940 20 W M 01/01/2011 00:05:00 5200 Moravia Rd ## 9 11127051 24 B M 01/01/2011 00:07:00 2400 Gainsdbourgh Ct ## 10 11127018 53 B M 01/01/2011 00:15:00 3300 Woodland Ave ## # ... with 3 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt; # that is equivalent to arrest_tab[1:10,1:10] ## # A tibble: 10 x 10 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 00:00:00 &lt;NA&gt; ## 2 11127013 37 B M 01/01/2011 00:01:00 2000 Wilkens Ave ## 3 11126887 46 B M 01/01/2011 00:01:00 2800 Mayfield Ave ## 4 11126873 50 B M 01/01/2011 00:04:00 2100 Ashburton St ## 5 11126968 33 B M 01/01/2011 00:05:00 4000 Wilsby Ave ## 6 11127041 41 B M 01/01/2011 00:05:00 2900 Spellman Rd ## 7 11126932 29 B M 01/01/2011 00:05:00 800 N Monroe St ## 8 11126940 20 W M 01/01/2011 00:05:00 5200 Moravia Rd ## 9 11127051 24 B M 01/01/2011 00:07:00 2400 Gainsdbourgh Ct ## 10 11127018 53 B M 01/01/2011 00:15:00 3300 Woodland Ave ## # ... with 3 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt; # with the `seq` function you can do more sophisticated things like select only entries in odd rows (1,3,5,7...) head(arrest_tab[seq(from=1,to=nrow(arrest_tab),by=2), ]) ## # A tibble: 6 x 15 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 00:00:00 &lt;NA&gt; ## 2 11126887 46 B M 01/01/2011 00:01:00 2800 Mayfield Ave ## 3 11126968 33 B M 01/01/2011 00:05:00 4000 Wilsby Ave ## 4 11126932 29 B M 01/01/2011 00:05:00 800 N Monroe St ## 5 11127051 24 B M 01/01/2011 00:07:00 2400 Gainsdbourgh Ct ## 6 11127057 28 B M 01/01/2011 00:15:00 3300 Woodland Ave ## # ... with 8 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; Now, since columns have names, we can also use strings (and vectors of strings) to index data frames. # single column arrest_tab[1:10, &quot;age&quot;] ## # A tibble: 10 x 1 ## age ## &lt;int&gt; ## 1 23 ## 2 37 ## 3 46 ## 4 50 ## 5 33 ## 6 41 ## 7 29 ## 8 20 ## 9 24 ## 10 53 # multiple columns arrest_tab[1:10, c(&quot;age&quot;, &quot;sex&quot;, &quot;race&quot;)] ## # A tibble: 10 x 3 ## age sex race ## &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; ## 1 23 B M ## 2 37 B M ## 3 46 B M ## 4 50 B M ## 5 33 B M ## 6 41 B M ## 7 29 B M ## 8 20 W M ## 9 24 B M ## 10 53 B M If we wanted a single named column from a data frame there’s a special operator $ to index: # first ten values of the age column arrest_tab$age[1:10] ## [1] 23 37 46 50 33 41 29 20 24 53 # EXERCISE # try using three different ways of selecting rows 20 to 30 # of the &quot;sex&quot; column In addition to integer indices or names, we can use vectors of logical values for indexing. # rows 2,4,7 and 10 using logical indices arrest_tab[c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE,rep(FALSE,nrow(arrest_tab)-10)),] ## # A tibble: 4 x 15 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11127013 37 B M 01/01/2011 00:01:00 2000 Wilkens Ave ## 2 11126873 50 B M 01/01/2011 00:04:00 2100 Ashburton St ## 3 11126932 29 B M 01/01/2011 00:05:00 800 N Monroe St ## 4 11127018 53 B M 01/01/2011 00:15:00 3300 Woodland Ave ## # ... with 8 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; # now here&#39;s a fun one, if we only wanted odd rows head(arrest_tab[c(TRUE,FALSE),]) ## # A tibble: 6 x 15 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126858 23 B M 01/01/2011 00:00:00 &lt;NA&gt; ## 2 11126887 46 B M 01/01/2011 00:01:00 2800 Mayfield Ave ## 3 11126968 33 B M 01/01/2011 00:05:00 4000 Wilsby Ave ## 4 11126932 29 B M 01/01/2011 00:05:00 800 N Monroe St ## 5 11127051 24 B M 01/01/2011 00:07:00 2400 Gainsdbourgh Ct ## 6 11127057 28 B M 01/01/2011 00:15:00 3300 Woodland Ave ## # ... with 8 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; The last example shows one of the most common gotchas in R. Indices are recycled. For instance if selecting rows, if you pass a logical vector that’s shorter than the number of rows in the data frame, the vector will be recycled as many times as necessary to match the number of rows in the dataset. Now, why is this useful, because a pithy index vector can let you select easily. Why is this bad, because errors in code can go easily unnoticed. So in this case, the price of ease of use is paid by the programmer by having to think a lot more carefully about their code (this is a theme in R programming…) The utility of logical indexing is that now we can select rows based on a property of its values for a given column # select rows for entities younger than 21 years old head(arrest_tab[arrest_tab$age &lt; 21, ]) ## # A tibble: 6 x 15 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 11126940 20 W M 01/01/2011 00:05:00 5200 Moravia Rd ## 2 11126942 20 B M 01/01/2011 01:22:00 1900 Ashburton Ave ## 3 11126941 20 W M 01/01/2011 02:00:00 300 S Bentalou St ## 4 11126955 20 B M 01/01/2011 02:20:00 900 Myrtle Ave ## 5 11127139 19 W M 01/01/2011 02:22:00 4500 Erdman Ave ## 6 11127003 20 B F 01/01/2011 02:49:00 2400 Brentwood St ## # ... with 8 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; # notice that the value of expression `arrest_tab$age &lt; 21` # is a logical vector # select entities (arrests) occuring in Mount Washington, # a specific neighborhood in Baltimore head(arrest_tab[arrest_tab$neighborhood == &quot;Mount Washington&quot;,]) ## # A tibble: 6 x 15 ## arrest age sex race arrestDate arrestTime arrestLocation ## &lt;int&gt; &lt;int&gt; &lt;fctr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;time&gt; &lt;chr&gt; ## 1 NA NA NA NA &lt;NA&gt; NA &lt;NA&gt; ## 2 NA NA NA NA &lt;NA&gt; NA &lt;NA&gt; ## 3 NA NA NA NA &lt;NA&gt; NA &lt;NA&gt; ## 4 NA NA NA NA &lt;NA&gt; NA &lt;NA&gt; ## 5 NA NA NA NA &lt;NA&gt; NA &lt;NA&gt; ## 6 NA NA NA NA &lt;NA&gt; NA &lt;NA&gt; ## # ... with 8 more variables: incidentOffense &lt;fctr&gt;, ## # incidentLocation &lt;chr&gt;, charge &lt;chr&gt;, chargeDescription &lt;chr&gt;, ## # district &lt;chr&gt;, post &lt;int&gt;, neighborhood &lt;chr&gt;, `Location 1` &lt;chr&gt; # how about arrests where subjects are under 21 in Mount Washington? # use a logical `and` operator indices &lt;- arrest_tab$age &lt; 21 &amp; arrest_tab$neighborhood == &quot;Mount Washington&quot; 5.8 Exploration R has built-in functions that help easily obtain summary information about datasets. For instance: summary(arrest_tab$sex) ## A B H I U W NA&#39;s ## 242 87268 1 218 1749 15048 2 summary(arrest_tab$race) ## F M NA&#39;s ## 19431 85095 2 # well that seems problematic # let&#39;s rename columns to correct that colnames(arrest_tab)[3:4] &lt;- c(&quot;race&quot;, &quot;sex&quot;) We can also ask other useful type of summaries # What is the average age in arrests? mean(arrest_tab$age) ## [1] 33.19639 # Median age? median(arrest_tab$age) ## [1] 30 # what types of offenses are there summary(arrest_tab$incidentOffense) ## Unknown Offense 87-Narcotics ## 38649 24744 ## 4E-Common Assault 87O-Narcotics (Outside) ## 6739 6515 ## 97-Search &amp; Seizure 79-Other ## 3670 3461 ## 24-Towed Vehicle 6C-Larceny- Shoplifting ## 2994 1849 ## 4C-Agg. Asslt.- Oth. 55A-Prostitution ## 1556 1398 ## 4B-Agg. Asslt.- Cut 55-Disorderly Person ## 1195 923 ## 115-Trespassing 5A-Burg. Res. (Force) ## 871 847 ## 75-Destruct. Of Property 4D-Agg. Asslt.- Hand ## 686 618 ## 61-Person Wanted On War 3B-Robb Highway (Ua) ## 482 410 ## 54-Armed Person 7A-Stolen Auto ## 394 392 ## 4A-Agg. Asslt.- Gun 6D-Larceny- From Auto ## 356 336 ## 6J-Larceny- Other 3AF-Robb Hwy-Firearm ## 312 277 ## 49-Family Disturbance 26-Recovered Vehicle ## 253 249 ## 6G-Larceny- From Bldg. 20A-Followup ## 248 246 ## 78-Gambling 5D-Burg. Oth. (Force) ## 219 196 ## 3K-Robb Res. (Ua) 111-Protective Order ## 176 152 ## 4F-Assault By Threat 109-Loitering ## 152 131 ## 117-Fto 5C-Burg. Res. (Noforce) ## 130 122 ## 3AK-Robb Hwy-Knife 5B-Burg. Res. (Att.) ## 102 102 ## 81-Recovered Property 108-Liquor Law/Open Container ## 94 92 ## 3D-Robb Comm. (Ua) 2A-Rape (Force) ## 92 89 ## 6E-Larceny- Auto Acc 112-Traffic Related Incident ## 85 81 ## 23-Unauthorized Use 88-Unfounded Call ## 81 80 ## 3AO-Robb Hwy-Other Wpn 7C-Stolen Veh./Other ## 79 78 ## 2H-Indecent Exp. 1A-Murder ## 72 64 ## 71-Sex Offender Registry 48-Involuntary Detention ## 64 57 ## 114-Hindering 3AJF-Robb Carjack-Firearm ## 56 56 ## 2F-Placing Hands 73-False Pretense ## 54 54 ## 6B-Larceny- Purse Snatch 95-Exparte ## 51 51 ## 3CF-Robb Comm-Firearm 3JF-Robb Residence-Firearm ## 43 43 ## 56-Missing Person 98-Child Neglect ## 41 41 ## 3P-Robb Misc. (Ua) 58-Injured Person ## 35 35 ## 85-Mental Case 3BJ-Robb Carjack(Ua) ## 34 33 ## 5F-Burg. Oth. (Noforce) 6F-Larceny- Bicycle ## 31 31 ## 2G-Sodomy/Perverson 3JK-Robb Residence-Knife ## 30 30 ## 3CK-Robb Comm-Knife 80-Lost Property ## 25 25 ## 2B-Rape (Attempt) 29-Driving While Intox. ## 21 20 ## 3NF-Robb Misc-Firearm 5E-Burg. Oth. (Att.) ## 20 18 ## 2D-Statutory Rape 3JO-Robb Residence-Other Wpn ## 17 17 ## 67-Child Abuse-Physical 103-Dead On Arrival ## 17 15 ## 3CO-Robb Comm-Other Wpn 3NK-Robb Misc-Knife ## 15 15 ## 113-Littering 39-Fire ## 14 14 ## 76-Child Abuse-Sexual 8AO-Arson Sin Res Str-Occ ## 14 14 ## 96-Stop &amp; Frisk 116-Public Urination / Defecation ## 14 13 ## 110-Summons Served 20H-Traffic Control ## 12 11 ## 3AJK-Robb Carjack-Knife 3GF-Robb Conv Store-Firearm ## 11 11 ## 106-Custody Dispute 52A-Animal Cruelty ## 10 10 ## 70A-Ill. Dumping 83-Discharging Firearm ## 10 10 ## 3H-Robb Conv. Stor.(Ua) 3NO-Robb Misc-Other Wpn ## 9 8 ## 93-Abduction - Other (Other) ## 8 101 # what does summary looks like for continuous attributes? summary(arrest_tab$age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0 23.0 30.0 33.2 43.0 87.0 Combining this type of summary with our indexing strategies we learned previously we can ask more specific questions # What is the average age for arrests in Mount Washington? mount_washington_index &lt;- arrest_tab$neighborhood == &quot;Mount Washington&quot; mean(arrest_tab$age[mount_washington_index], na.rm=TRUE) ## [1] 31.10345 # How about the number of arrests in Mount Washington _stratified_ by race and sex? table(arrest_tab$race[mount_washington_index], arrest_tab$sex[mount_washington_index]) ## ## F M ## A 0 0 ## B 4 14 ## H 0 0 ## I 0 0 ## U 0 0 ## W 2 9 # how about a graphical summary of arrest ages in Mount Washington? # we&#39;ll use a boxplot boxplot(arrest_tab$age[mount_washington_index]) # can we do the same stratified by sex? boxplot(arrest_tab$age[mount_washington_index]~arrest_tab$sex[mount_washington_index]) This used a very useful notation in R: the tilde, ~ which we will encounter in a few different places. One way of thinking about that abstractly is, do something with this attribute, as a function (or depending on, stratified by, conditioned on) this other attribute. For instance, “plot age as a function of sex” in our example. Let’s write code that’s a little cleaner for that last plot, and let’s also make the plot a bit more useful by adding a title and axis labels: mount_washington_tab &lt;- arrest_tab[mount_washington_index,] boxplot(mount_washington_tab$age~mount_washington_tab$sex, main=&quot;Mt. Washington&quot;, xlab=&quot;Sex&quot;, ylab=&quot;Arrest Age&quot;) Here’s one more useful plot: barplot(table(mount_washington_tab$race), xlab=&quot;Number of Arrests&quot;, ylab=&quot;Race&quot;) 5.9 Functions Now suppose we wanted to do a similar analysis for other neighborhoods. In that case we should encapsulate the summaries and plots we want to do in a function: analyze_neighborhood &lt;- function(neighborhood) { neighborhood_index &lt;- arrest_tab$neighborhood == neighborhood neighborhood_tab &lt;- arrest_tab[neighborhood_index,] boxplot(neighborhood_tab$age~neighborhood_tab$sex, main = neighborhood, xlab = &quot;Sex&quot;, ylab=&quot;Arrest Age&quot;) barplot(table(neighborhood_tab$race), main = neighborhood, xlab = &quot;Race&quot;, ylab=&quot;Number of Arrests&quot;) } Now we can use that function to make our plots for specific neighborhoods analyze_neighborhood(&quot;Mount Washington&quot;) analyze_neighborhood(&quot;Hampden&quot;) 5.10 A note on data types This dataset contains data of types commonly found in data analyses Numeric (continuous): A numeric measurement (e.g., height) Numeric (discrete): Usually obtained from counting, think only integers (e.g., age which is measured in years) Categorical: One of a possible set of values (e.g., sex) Datetime: Date and time of some event or observation (e.g., arrestDate, arrestTime) geolocation: Latitude and Longitude of some event or observation (e.g., Location.) The distinction between continuous and discrete is a bit tricky since measurements that have finite precision must be discrete. So, the difference really comes up when we build statistical models of datasets for analysis. For now, think of discrete data as the result of counting, and continuous data the result of some physical measurement. We said that R is designed for data analysis. My favorite example of how that manifests itself is the factor datatype. If you look at your dataset now, arrest_tab$sex is a vector of strings: class(arrest_tab$sex) ## [1] &quot;factor&quot; summary(arrest_tab$sex) ## F M NA&#39;s ## 19431 85095 2 However, as a measurement, or attribute, it should only take one of two values (or three depending on how you record missing, unknown or unspecified). So, in R, that categorical data type is called a factor. Notice what the summary function does after turning the sex attribute into a factor: arrest_tab$sex &lt;- factor(arrest_tab$sex) summary(arrest_tab$sex) ## F M NA&#39;s ## 19431 85095 2 This distinction shows up in many other places where functions have very different behavior when called on a vector of strings and when called on a factor (e.g., functions that make plots, or functions that learn statistical models). One last note, the possible values a factor can take are called levels: levels(arrest_tab$sex) ## [1] &quot;F&quot; &quot;M&quot; Exercise: you should transform the race attribute into a factor as well. How many levels does it have? 5.11 Thinking in vectors In data analysis the vector is probably the most fundamental data type (other than basic numbers, strings, etc.). Why? Consider getting data about one attribute, say height, for a group of people. What do you get, an array of numbers, all in the same unit (say feet, inches or centimeters). How about their name? Then you get an array of strings. Abstractly, we think of vectors as arrays of values, all of the same class or datatype. In our dataset, each column, corresponding to an attribute, is a vector: # the &#39;str&#39; function gives a bit more low-level information about objects str(arrest_tab$Location) ## Warning: Unknown or uninitialised column: &#39;Location&#39;. ## NULL R (and other data analysis languages) are designed to operate on vectors easily. For example, frequently we want to do some kind of transformation to a data attribute, say record age in months rather than years. Then we would perform the same operation for every value in the corresponding vector: age_in_months &lt;- arrest_tab$age * 12 In a language that doesn’t support this type of vectorized operation, you would use a loop, or similar construct, to perform this operation. Another type of transformation frequently done is to combine attributes into a single attribute. Suppose we wanted to combine the arrestLocation and neighborhood attributes into an address attribute: # remember you can always find out what a function does by using ?paste head(paste(arrest_tab$arrestLocation, arrest_tab$neighborhood, sep=&quot;, &quot;)) ## [1] &quot;NA, NA&quot; ## [2] &quot;2000 Wilkens Ave, Carrollton Ridge&quot; ## [3] &quot;2800 Mayfield Ave, Belair-Edison&quot; ## [4] &quot;2100 Ashburton St, Panway/Braddish Avenue&quot; ## [5] &quot;4000 Wilsby Ave, Pen Lucy&quot; ## [6] &quot;2900 Spellman Rd, Cherry Hill&quot; Here the paste function concatenates strings element-wise: the first string in arrestLocation is concatenated with the first string in neighborhood, etc. Arithmetic operations have the same element-wise operation: # add first 10 odd numbers to first 10 even numbers seq(1, 20, by=2) + seq(2, 20, by=2) ## [1] 3 7 11 15 19 23 27 31 35 39 5.12 Lists vs. vectors We saw that vectors are arrays of values, all of the same class. R also allows arrays of values that have different class or datatype. These are called lists. Here is a list containing a string, and a couple of numbers: my_list &lt;- list(&quot;Hector&quot;, 40, 71) my_list ## [[1]] ## [1] &quot;Hector&quot; ## ## [[2]] ## [1] 40 ## ## [[3]] ## [1] 71 Indexing in lists uses different syntax from the indexing we saw before. To index an element in a list we would use a double-bracket [[. my_list[[1]] ## [1] &quot;Hector&quot; In contrast, the single bracket [ indexes a part of the list, and thus returns another list. my_list[1] ## [[1]] ## [1] &quot;Hector&quot; That way we can use slice notation and other operations we saw when indexing vectors as before, but we get lists as results. my_list[1:2] ## [[1]] ## [1] &quot;Hector&quot; ## ## [[2]] ## [1] 40 List elements can have names as well: named_list &lt;- list(person=&quot;Hector&quot;, age=40, height=71) named_list ## $person ## [1] &quot;Hector&quot; ## ## $age ## [1] 40 ## ## $height ## [1] 71 Which we can use to index elements as well (both with [[ and $) named_list[[&quot;person&quot;]] ## [1] &quot;Hector&quot; named_list$person ## [1] &quot;Hector&quot; Lists can hold arbitrary objects as elements. For example you can have a vector of strings as an element in a list my_list &lt;- list(person=c(&quot;Hector&quot;, &quot;Ringo&quot;, &quot;Paul&quot;, &quot;John&quot;), 40, 71) my_list ## $person ## [1] &quot;Hector&quot; &quot;Ringo&quot; &quot;Paul&quot; &quot;John&quot; ## ## [[2]] ## [1] 40 ## ## [[3]] ## [1] 71 Now, we come to a momentous occassion in understanding R. data.frames are special instances of lists! But, in this case, every element in the list is a vector, and all vectors have exactly the same length. So arrest_tab$age indexes the named element age in the list arrest_tab! The pattern of applying functions to entries in vectors also holds for elements in lists. So, if we want to calculate smallest value for every attribute in our dataset, we could do something like this: sapply(arrest_tab, function(v) sort(v)[1]) ## arrest ## &quot;11126858&quot; ## age ## &quot;0&quot; ## race ## &quot;1&quot; ## sex ## &quot;1&quot; ## arrestDate ## &quot;01/01/2011&quot; ## arrestTime ## &quot;0&quot; ## arrestLocation ## &quot;0 20Th St&quot; ## incidentOffense ## &quot;1&quot; ## incidentLocation ## &quot;*** District Detail ***&quot; ## charge ## &quot;1 0002&quot; ## chargeDescription ## &quot;Abduct Child Under 12 || Abduct Child Under 12&quot; ## district ## &quot;CENTRAL&quot; ## post ## &quot;111&quot; ## neighborhood ## &quot;Abell&quot; ## Location 1 ## &quot;(39.2000327685, -76.5555163146)&quot; 5.13 Making the process explicit with pipes We’ve discussed the idea of thinking about data analysis work in terms of “pipelines”, where we start from data of a certain shape (e.g., a data.frame) and apply transformations (functions) to obtain data that contains the computation we want. Consider the following example seen in class: What is the mean age of males arrested in the SOUTHERN district? We can frame the answer to this question as a series of data transformations to get the answer we are looking for: # filter data to observations we need index_vector &lt;- arrest_tab$sex == &quot;M&quot; &amp; arrest_tab$district == &quot;SOUTHERN&quot; tmp &lt;- arrest_tab[index_vector,] # select the attribute/column we need tmp &lt;- tmp[[&quot;age&quot;]] # compute statistic required mean(tmp, na.rm=TRUE) ## [1] 32.28481 Let’s rewrite this using functions to illustrate the point filter_data &lt;- function(data) { index_vector &lt;- data$sex == &quot;M&quot; &amp; data$district == &quot;SOUTHERN&quot; data[index_vector,] } select_column &lt;- function(data, column) { data[[column]] } tmp &lt;- filter_data(arrest_tab) tmp &lt;- select_column(tmp, &quot;age&quot;) mean(tmp, na.rm=TRUE) ## [1] 32.28481 So, this pattern of data–&gt;transform–&gt;data becomes clearer when written that way. The dplyr package introduces syntactic sugar to make this explicit. We can write the above snippet using the “pipe” operator %&gt;%: arrest_tab %&gt;% filter_data() %&gt;% select_column(&quot;age&quot;) %&gt;% mean(na.rm=TRUE) ## [1] 32.28481 The %&gt;% binary operator takes the value to its left and inserts it as the first argument of the function call to its right. So the expression LHS %&gt;% f(another_argument) is equivalent to the expression f(LHS, another_argument). We will see this pattern extensively in class because it explicitly presents the way we want to organize many of our data analysis tasks. "]
]
